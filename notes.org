* UI
Login / Create Account / Landing
Event Feed (pretty much everything will be a version of this -- just plug in a
different list of events depending on the situation. even the hosts would use
this page, just with an extra button for edit/create)
Create Events
Event Detail Page
Account Management
* Features
** MVP
- payment service? allow people to subscribe and stuff.
- geolocation to find nearby events (background or foreground)
- check in at events
- push notifications from us
- a main event feed
  - check off tags on signup and use that as the seed for the event feed
- a detail view page for events
- a page specific to each venue or host
- heart events / save for later / maybe going
- a way for people to get their deals / free shit
- venue editor, event editor
  - info about parking/transportation
- filter events

** Not MVP
- analytics dashboard
- sell banner ads
- a map to view events
- subscribe to hosts
- a calendar
- internal rewards for using the app (tied to checking in?)
- recommendation algorithms
  - use google adsense
  - use fb
  - use what your friends on the site like
- hook into existing ad platforms
- paid subscription for users where they can get special deals with restaurants
  - more free stuff
  - 5% off
  - skip the lines

- friends system (invite, network effect)
- 'groups' for an event. you and your squad can make a group so you know which
  of your friends is going to a thing.
- at first, keep them more venmo-like. not really for talking or networking,
  just see what events your friends are going to and coordinate.

* Data
an event has:
- a thumbnail
- a title
- a description
- flags (21+? free? etc)
- tags
- an owner (i.e. an organizer)
- a reward

an organizer has:
- events
- followers?
- a name
- administrative data
- a rating? this might be dangerous -- ratings tend to centralize the app around
  ratings and put you into yelp territory. maybe just thumbs up/thumbs down with
  a word count minimum to review...?

a user has:
- interested events
- attended events
- a name
- administrative data (email, phone number)

some kind of operations we're going to wanna do:
- query a user's preferences, then get the best matching N events
- query all events that pass N filters
- tie events to users in different states (interested, going, etc)
- fetch all information about a specific event
- create relationships between users (friends, attended event, etc)
- perform events at time intervals relative to events (e.g. notify 24h before)
- query all of X kind of thing that belongs to a user/organizer (events,
  followers, ratings, etc)
* Questions
should we give rewards to anyone who shows up? why limit it to one person? if
it's profitable for the bar to give one person free shit, it'll probably be
profitable for them to give everyone free shit. because everyone will spend more
money than they're given at the bar.

1. login screen and accounts. set up database for users and organizers.
   - how is account auth handled? 3rd party or handrolled?
   - basic database setup for users and organizers
   - easy to get some code working and get comfortable with
     frameworks/debugging/etc
   - prob will need to connect to our database
2. make a skeleton organizer dashboard.
   - more database setup for organizer and events
   - figure out how api endpoints will work
3. make the main user screen that looks at all events.
   - hard
   - lots of moving parts
   - start with naive recommendation algorithm
4. filtering / search.
   - way more api endpoints
   - flesh out the server
* Tech
Django + RN + AWS
* Goals

* Links
How to set up Postgresql
https://www.robinwieruch.de/postgres-sql-macos-setup/

pg_dump / pg_restore
https://stackoverflow.com/questions/1237725/copying-postgresql-database-to-another-server

A quick overview of what you need to deploy a Django application to production
https://vsupalov.com/django-runserver-in-production/


The production bibles.
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04

* Setup
Substitute pip with pip3 and python with python3 if you're on a machine that works like that.

You can run all of these from the top level directory.

brew install postgresql
pip install django psycopg2 virtualenv
initdb /usr/local/var/postgres
pg_ctl -D /usr/local/var/postgres start
# Here, you'll either need to grab a copy of the database or we'll need to have a server somewhere.
virtualenv comethru_venv
source comethru_venv/bin/activate
python manage.py createsuperuser
python manage.py runserver localhost:8080

Visit localhost:8000/admin and enter your super user credentials. If it works,
the database is set up!

This will run the development server that Django serves from:
python manage.py runserver

download voidstar.pem
brew install openssh
ssh -i voidstar.pem ubuntu@ec2-18-220-160-63.us-east-2.compute.amazonaws.com

** stuff i had to do on aws
sudo apt-get install libpq-dev
sudo apt-get install python3-pip
sudo apt-get install python3-dev
sudo apt-get install python-psycopg2

pip install django djangorestframework psycopg2 gunicorn

sudo -u postgres psql
CREATE DATABASE comethru;
CREATE USER comethru_admin WITH PASSWORD 'fourscoreandseven';
ALTER ROLE comethru_admin SET client_encoding TO 'utf8';
ALTER ROLE comethru_admin SET default_transaction_isolation TO 'read committed'; (edited) 
ALTER ROLE comethru_admin SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE comethru to comethru_admin;

sudo ufw allow OpenSSH
sudo ufw allow 8000
sudo ufw enable

Add a custom TCP rule on AWS to inbound allow traffic on port 8000, so that our server can...serve.
Make a systemd service to expose a socket for gunicorn
Make a systemd service to run gunicorn as a daemon and bind to that socket

Add nginx configuration to proxy for gunicorn

sudo ufw delete allow 800
sudo ufw allow 'Nginx Full'
* spader
would be nice to expose the backend on a true blue web server so we could share test
data easily. that'd require spinning up an AWS instance, configuring environment
variables and packages on said instance, probably configuring nginx, adding wsgi
configuration to django app. also adding a mux between local/server on the
frontend because you're not always gonna want to hit the server. the alternative
to this is to temporarily keep separate copies of the database, and sync up with
pg_dump / pg_restore when we really need to share. let's go with that one.

add django-rest-framework on top of the API. alternative is tastypie, but the
former is more well supported and has a nice web viewer kind of thing going for
it. that'll just allow us to query all the shit we've got in our database with a
normal looking API. should be quite easy to set up.

The CSS box model works like this: The innermost box is your content. Wrapping
that is a box called padding. Next, there is the border. The border separates
your content from other content. Padding separates your content from the
border. The last thing is the margin. Margin separates the whole shebang from
other whole shebangs. 

Here's another CSS thing: When you're using flexbox, justify-content is used to
align along the flex axis, and align-items is used to align along the cross
axis. 

The most concise way to remember how _this_ binds in JS functions. In normal
functions, it'll refer to the _callee_'s this pointer. In arrow functions, it'll
refer to the _caller_'s. It's a little more complicated than that -- really,
arrow functions are just capturing the current lexical scope and using that. So
if there are a couple callers passing down an arrow function, it's not quite
accurate to say THE caller's this pointer. But it makes enough sense. 

It's okay to send passwords over plaintext if you're using HTTPS:
https://security.stackexchange.com/questions/110415/is-it-ok-to-send-plain-text-password-over-https

