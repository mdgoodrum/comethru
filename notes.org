* Features
** MVP

These are actual features
- Compile it on Android and fix discrepancies
- QR codes
  - Bring in something to scan QR codes
  - Selective logic for who can scan QR codes for certain promos
  - Make QR codes out of promos
  - Make QR codes to download the app
- Push notifications
- Implement promos
  - Design + make table
  - Write the script for distributing promos
  - UI for viewing received promos
    - Push notifications
  - Sketch of architecture running the job
- Filters
  - Basic association between user and filters
  - Allow user to modify their feed with temporary filters
- Fix the UI iteratively
- Add push notifications
- A system for people to redeem their free shit
- A way to check in at events. Preferably automatically.
- Store images on S3 and have a scheme to refer to images from the frontend
  - Make sure different sized images don't break the layout
- Minify the app
- Make sure all errors are properly dealt with
- Security!
  - Lock down the API from random HTTP requests
  - Rate limit the API
  - Lock down the DB and API from the Russians and Chinese
- Logging

These are things that are done halfway
- Make the nav bar work
- Make another pass at the CSS
- Make the cards pretty
- A way to mark events as not / going / interested
  - [ ] Fix the CSS on the buttons

These are things that might not be MVP
- geolocation to find nearby events (background or foreground)
- a page specific to each venue or host
- venue editor, event editor
  - info about parking/transportation

** Not MVP
- analytics dashboard
- sell banner ads
- a map to view events
- subscribe to hosts
- a calendar
- internal rewards for using the app (tied to checking in?)
- recommendation algorithms
  - use google adsense
  - use fb
  - use what your friends on the site like
- hook into existing ad platforms
- paid subscription for users where they can get special deals with restaurants
  - more free stuff
  - 5% off
  - skip the lines

- friends system (invite, network effect)
- 'groups' for an event. you and your squad can make a group so you know which
  of your friends is going to a thing.
- at first, keep them more venmo-like. not really for talking or networking,
  just see what events your friends are going to and coordinate.

* Data
an event has:
- a thumbnail
- a title
- a description
- flags (21+? free? etc)
- tags
- an owner (i.e. an organizer)
- a reward

an organizer has:
- events
- followers?
- a name
- administrative data
- a rating? this might be dangerous -- ratings tend to centralize the app around
  ratings and put you into yelp territory. maybe just thumbs up/thumbs down with
  a word count minimum to review...?

a user has:
- interested events
- attended events
- a name
- administrative data (email, phone number)

some kind of operations we're going to wanna do:
- query a user's preferences, then get the best matching N events
- query all events that pass N filters
- tie events to users in different states (interested, going, etc)
- fetch all information about a specific event
- create relationships between users (friends, attended event, etc)
- perform events at time intervals relative to events (e.g. notify 24h before)
- query all of X kind of thing that belongs to a user/organizer (events,
  followers, ratings, etc)
* Questions
should we give rewards to anyone who shows up? why limit it to one person? if
it's profitable for the bar to give one person free shit, it'll probably be
profitable for them to give everyone free shit. because everyone will spend more
money than they're given at the bar.

1. login screen and accounts. set up database for users and organizers.
   - how is account auth handled? 3rd party or handrolled?
   - basic database setup for users and organizers
   - easy to get some code working and get comfortable with
     frameworks/debugging/etc
   - prob will need to connect to our database
2. make a skeleton organizer dashboard.
   - more database setup for organizer and events
   - figure out how api endpoints will work
3. make the main user screen that looks at all events.
   - hard
   - lots of moving parts
   - start with naive recommendation algorithm
4. filtering / search.
   - way more api endpoints
   - flesh out the server
* Links
How to set up Postgresql
https://www.robinwieruch.de/postgres-sql-macos-setup/

pg_dump / pg_restore
https://stackoverflow.com/questions/1237725/copying-postgresql-database-to-another-server

A quick overview of what you need to deploy a Django application to production
https://vsupalov.com/django-runserver-in-production/


The production bibles.
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04

* spader
The CSS box model works like this: The innermost box is your content. Wrapping
that is a box called padding. Next, there is the border. The border separates
your content from other content. Padding separates your content from the
border. The last thing is the margin. Margin separates the whole shebang from
other whole shebangs. 

Here's another CSS thing: When you're using flexbox, justify-content is used to
align along the flex axis, and align-items is used to align along the cross
axis. 

The most concise way to remember how _this_ binds in JS functions. In normal
functions, it'll refer to the _callee_'s this pointer. In arrow functions, it'll
refer to the _caller_'s. It's a little more complicated than that -- really,
arrow functions are just capturing the current lexical scope and using that. So
if there are a couple callers passing down an arrow function, it's not quite
accurate to say THE caller's this pointer. But it makes enough sense. 

It's okay to send passwords over plaintext if you're using HTTPS:
https://security.stackexchange.com/questions/110415/is-it-ok-to-send-plain-text-password-over-https
** stuff i had to do on aws
sudo apt-get install libpq-dev
sudo apt-get install python3-pip
sudo apt-get install python3-dev
sudo apt-get install python-psycopg2

pip install django djangorestframework psycopg2 gunicorn

sudo -u postgres psql
CREATE DATABASE comethru;
CREATE USER comethru_admin WITH PASSWORD 'fourscoreandseven';
ALTER ROLE comethru_admin SET client_encoding TO 'utf8';
ALTER ROLE comethru_admin SET default_transaction_isolation TO 'read committed'; (edited) 
ALTER ROLE comethru_admin SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE comethru to comethru_admin;

sudo ufw allow OpenSSH
sudo ufw allow 8000
sudo ufw enable

Add a custom TCP rule on AWS to inbound allow traffic on port 8000, so that our
server can...serve.
Make a systemd service to expose a socket for gunicorn
Make a systemd service to run gunicorn as a daemon and bind to that socket

Add nginx configuration to proxy for gunicorn

sudo ufw delete allow 800
sudo ufw allow 'Nginx Full'
** ramble
Somewhat prioritized list:

*** What kinds of events are we going to target at first?
One-off discounts -- not necessarily events:
Bars. Show up and get a free shot.
Movie theaters. 
Restaurants. 
Exercise studios. 
Festivals. (e.g. BBQ, Beer, Ramen -- those kind of deals)

*** How are events going to be added?
If vendors can add their own events, you might run into the problem of low
quality events flooding the platform. If you curate all events, there might be
too much friction to add an event. If they can add, you also have to worry about
the game theory of it. What's to stop a bar from adding ten events that are very
similar to make them more likely to show up? There needs to be some kind of
manual intervention. Totally manual is too hard. Just lay some loose guidelines
and fix it when people abuse it.

*** How are we going to get people to download our app?
Post flyers with QR codes. 
Give them something free for signing up. 
Focus on affluent but not rich areas. Around GT, Atlantic Station, Buckhead,
Decatur. 
Internet ads. 
Give them free stuff for referring other people. Make it dead simple to do. Give
them a punch card. Let them choose from a set after they fill it. Give them
something free after someone they refer checks in somewhere. 
Give them free stuff for checking in places themself. 

*** What's our algorithm for distributing free shit?
When there are very few users and very few events, it doesn't really matter. A
good, easy idea to future-proof this is to have the user select a few things
they're interested in when they sign up, and only send them events from those
categories. 

*** How do people redeem their free shit?
When you get something, you get a QR code to redeem it. Vendors have a screen on
their app where they can scan the QR codes. Once it's scanned, it won't scan
anymore. This even works in bars or other busy places -- if you order a shot,
you'd have to pay anyway. Instead of cashing you out, the bartender just has to
whip out their phone and scan a QR code. 

*** How do people use the app when they're looking for something to do?
If the app is just free shit, there's no reason to _use_ the app. If we also
have events on the app that people can check out, it might be unclear what the
app is for. 

Make it more likely for people to get stuff if they mark themselves as
interested. 
** talkin
Main split is between events and places. You don't have to sign up for promos.

We need to write something to scrape events until we have enough money to hire 
someone. For places, we'll do it by hand.

Events are going to be added by some admin interface on the app. And then we'll
just rate limit them. Each user or venue can only have a certain number of events
per time frame.
- How do you lock events -- by user or by venue? If by user, you need to make sure
  that each restaurant only has one account. If by venue, you need to make sure 
  only certain people can create stuff for that venue.

